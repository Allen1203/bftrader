// Code generated by protoc-gen-go.
// source: bfproxy.proto
// DO NOT EDIT!

/*
Package bftrader_bfproxy is a generated protocol buffer package.

It is generated from these files:
	bfproxy.proto

It has these top-level messages:
*/
package bftrader_bfproxy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bftrader "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for BfProxyService service

type BfProxyServiceClient interface {
	// 交易所开机/连通通知，可以在这里做：
	// 1. 如果是收盘时间可以做上次收盘处理
	// 2. 查询持仓 查询合约，核准数据
	// 3. 如果是断网重连，可以自己度量
	OnTradeWillBegin(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 先发OnTradeWillBegin，然后查询合约，成功发此消息
	// 和 OnTradeWillBegin的间隙在1秒左右，可以做清理
	OnGotContracts(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 活跃检测
	// 也可以在这里做收盘处理，如果很长时间没有收到tick
	OnPing(ctx context.Context, in *bftrader.BfPingData, opts ...grpc.CallOption) (*bftrader.BfPingData, error)
	// 行情回报
	OnTick(ctx context.Context, in *bftrader.BfTickData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 命令/回报错误信息
	OnError(ctx context.Context, in *bftrader.BfErrorData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 日志信息
	OnLog(ctx context.Context, in *bftrader.BfLogData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 成交回报
	OnTrade(ctx context.Context, in *bftrader.BfTradeData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 委托回报
	OnOrder(ctx context.Context, in *bftrader.BfOrderData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 持仓回报
	OnPosition(ctx context.Context, in *bftrader.BfPositionData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 账号信息回报
	OnAccount(ctx context.Context, in *bftrader.BfAccountData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
}

type bfProxyServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfProxyServiceClient(cc *grpc.ClientConn) BfProxyServiceClient {
	return &bfProxyServiceClient{cc}
}

func (c *bfProxyServiceClient) OnTradeWillBegin(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfproxy.BfProxyService/OnTradeWillBegin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfProxyServiceClient) OnGotContracts(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfproxy.BfProxyService/OnGotContracts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfProxyServiceClient) OnPing(ctx context.Context, in *bftrader.BfPingData, opts ...grpc.CallOption) (*bftrader.BfPingData, error) {
	out := new(bftrader.BfPingData)
	err := grpc.Invoke(ctx, "/bftrader.bfproxy.BfProxyService/OnPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfProxyServiceClient) OnTick(ctx context.Context, in *bftrader.BfTickData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfproxy.BfProxyService/OnTick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfProxyServiceClient) OnError(ctx context.Context, in *bftrader.BfErrorData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfproxy.BfProxyService/OnError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfProxyServiceClient) OnLog(ctx context.Context, in *bftrader.BfLogData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfproxy.BfProxyService/OnLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfProxyServiceClient) OnTrade(ctx context.Context, in *bftrader.BfTradeData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfproxy.BfProxyService/OnTrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfProxyServiceClient) OnOrder(ctx context.Context, in *bftrader.BfOrderData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfproxy.BfProxyService/OnOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfProxyServiceClient) OnPosition(ctx context.Context, in *bftrader.BfPositionData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfproxy.BfProxyService/OnPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfProxyServiceClient) OnAccount(ctx context.Context, in *bftrader.BfAccountData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfproxy.BfProxyService/OnAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BfProxyService service

type BfProxyServiceServer interface {
	// 交易所开机/连通通知，可以在这里做：
	// 1. 如果是收盘时间可以做上次收盘处理
	// 2. 查询持仓 查询合约，核准数据
	// 3. 如果是断网重连，可以自己度量
	OnTradeWillBegin(context.Context, *bftrader.BfVoid) (*bftrader.BfVoid, error)
	// 先发OnTradeWillBegin，然后查询合约，成功发此消息
	// 和 OnTradeWillBegin的间隙在1秒左右，可以做清理
	OnGotContracts(context.Context, *bftrader.BfVoid) (*bftrader.BfVoid, error)
	// 活跃检测
	// 也可以在这里做收盘处理，如果很长时间没有收到tick
	OnPing(context.Context, *bftrader.BfPingData) (*bftrader.BfPingData, error)
	// 行情回报
	OnTick(context.Context, *bftrader.BfTickData) (*bftrader.BfVoid, error)
	// 命令/回报错误信息
	OnError(context.Context, *bftrader.BfErrorData) (*bftrader.BfVoid, error)
	// 日志信息
	OnLog(context.Context, *bftrader.BfLogData) (*bftrader.BfVoid, error)
	// 成交回报
	OnTrade(context.Context, *bftrader.BfTradeData) (*bftrader.BfVoid, error)
	// 委托回报
	OnOrder(context.Context, *bftrader.BfOrderData) (*bftrader.BfVoid, error)
	// 持仓回报
	OnPosition(context.Context, *bftrader.BfPositionData) (*bftrader.BfVoid, error)
	// 账号信息回报
	OnAccount(context.Context, *bftrader.BfAccountData) (*bftrader.BfVoid, error)
}

func RegisterBfProxyServiceServer(s *grpc.Server, srv BfProxyServiceServer) {
	s.RegisterService(&_BfProxyService_serviceDesc, srv)
}

func _BfProxyService_OnTradeWillBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfProxyServiceServer).OnTradeWillBegin(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfProxyService_OnGotContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfProxyServiceServer).OnGotContracts(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfProxyService_OnPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfPingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfProxyServiceServer).OnPing(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfProxyService_OnTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfTickData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfProxyServiceServer).OnTick(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfProxyService_OnError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfErrorData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfProxyServiceServer).OnError(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfProxyService_OnLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfLogData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfProxyServiceServer).OnLog(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfProxyService_OnTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfTradeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfProxyServiceServer).OnTrade(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfProxyService_OnOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfOrderData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfProxyServiceServer).OnOrder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfProxyService_OnPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfPositionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfProxyServiceServer).OnPosition(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfProxyService_OnAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfAccountData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfProxyServiceServer).OnAccount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BfProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bftrader.bfproxy.BfProxyService",
	HandlerType: (*BfProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnTradeWillBegin",
			Handler:    _BfProxyService_OnTradeWillBegin_Handler,
		},
		{
			MethodName: "OnGotContracts",
			Handler:    _BfProxyService_OnGotContracts_Handler,
		},
		{
			MethodName: "OnPing",
			Handler:    _BfProxyService_OnPing_Handler,
		},
		{
			MethodName: "OnTick",
			Handler:    _BfProxyService_OnTick_Handler,
		},
		{
			MethodName: "OnError",
			Handler:    _BfProxyService_OnError_Handler,
		},
		{
			MethodName: "OnLog",
			Handler:    _BfProxyService_OnLog_Handler,
		},
		{
			MethodName: "OnTrade",
			Handler:    _BfProxyService_OnTrade_Handler,
		},
		{
			MethodName: "OnOrder",
			Handler:    _BfProxyService_OnOrder_Handler,
		},
		{
			MethodName: "OnPosition",
			Handler:    _BfProxyService_OnPosition_Handler,
		},
		{
			MethodName: "OnAccount",
			Handler:    _BfProxyService_OnAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x3d, 0x68, 0xc5, 0x01, 0x43, 0x18, 0x15, 0x25, 0x47, 0x1f, 0x20, 0x48, 0x15, 0x29,
	0xde, 0x8c, 0x8a, 0x17, 0x61, 0x0b, 0x16, 0x3d, 0x27, 0xdb, 0x24, 0x2c, 0x96, 0x19, 0x99, 0xae,
	0xa2, 0x6f, 0xe6, 0xe3, 0xb9, 0xbb, 0x84, 0x92, 0x60, 0x37, 0x78, 0xd9, 0xc3, 0xf7, 0xcf, 0xc7,
	0x0f, 0x3f, 0x0b, 0x87, 0x55, 0xf3, 0x2e, 0xfc, 0xf5, 0x9d, 0xbb, 0xd7, 0x32, 0xa6, 0x55, 0x63,
	0xa5, 0x5c, 0xd6, 0x92, 0x77, 0x3c, 0x4b, 0x36, 0x24, 0x5c, 0x4c, 0x7f, 0x76, 0x21, 0x29, 0x9a,
	0xb9, 0xcf, 0x9e, 0x6b, 0xf9, 0x34, 0xba, 0xc6, 0x19, 0xa4, 0x8a, 0x16, 0xfe, 0xe8, 0xd5, 0xac,
	0x56, 0x45, 0xdd, 0x1a, 0xc2, 0x34, 0xdf, 0x78, 0x45, 0xf3, 0xc2, 0x66, 0x99, 0xfd, 0x21, 0xe7,
	0x3b, 0x78, 0x0d, 0x89, 0xa2, 0x47, 0xb6, 0x77, 0x4c, 0x2e, 0xd2, 0x76, 0xfd, 0x6f, 0x6f, 0xa2,
	0x68, 0x6e, 0xa8, 0xc5, 0xe3, 0x7e, 0xea, 0xc9, 0x7d, 0x69, 0xcb, 0x6c, 0x2b, 0x75, 0xde, 0xd4,
	0x7b, 0x0b, 0xa3, 0xdf, 0x86, 0x9e, 0x27, 0xc1, 0xdb, 0xd6, 0x75, 0x05, 0xfb, 0x8a, 0x1e, 0x44,
	0x58, 0xf0, 0xa4, 0x1f, 0x07, 0x14, 0xb5, 0x2e, 0x60, 0x4f, 0xd1, 0x13, 0xb7, 0x78, 0xd4, 0x0f,
	0x1d, 0x18, 0xef, 0x09, 0x2b, 0x0e, 0x7b, 0x02, 0x1a, 0xb7, 0x94, 0x38, 0x36, 0xb4, 0x02, 0x8a,
	0x5a, 0x37, 0x00, 0x6e, 0x3f, 0x5e, 0x1b, 0x6b, 0x98, 0xf0, 0x6c, 0xb0, 0x56, 0x47, 0xa3, 0xee,
	0x0c, 0x0e, 0x14, 0xdd, 0x6a, 0xcd, 0x1f, 0x64, 0xf1, 0xb4, 0x7f, 0xd0, 0xc1, 0x98, 0x59, 0x4d,
	0xc2, 0x0f, 0xba, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x8d, 0x42, 0x91, 0x74, 0x02, 0x00,
	0x00,
}
